class r{constructor(e){this.timestampListeners=[],this.videoEl=e,this.updatePoster()}getElement(){return this.videoEl}addTimestampListener(e,t){this.timestampListeners.push({millis:e,callback:t})}async load(){return new Promise(e=>{this.videoEl.addEventListener("timeupdate",()=>this.tick()),this.videoEl.addEventListener("ended",()=>this.replay()),this.videoEl.addEventListener("loadedmetadata",()=>{e()}),this.videoEl.load()})}setCurrentTime(e){this.videoEl.currentTime=e/1e3}getDuration(){return this.videoEl.duration||console.warn("video is not loaded yet"),this.videoEl.duration*1e3}play(e){e&&this.setCurrentTime(e),this.videoEl.play()}pause(){this.videoEl.pause()}replay(){for(const e of this.timestampListeners)e.triggered=!1;this.videoEl.currentTime=0,this.videoEl.play()}async tick(){if(this.videoEl.paused)return;const e=Math.ceil(this.videoEl.currentTime*1e3);for(const t of this.timestampListeners)!t.triggered&&e>=t.millis&&(t.triggered=!0,t.callback())}async updatePoster(){const t=Array.from(this.videoEl.getElementsByTagName("source")).find(i=>i.src===this.videoEl.currentSrc);t&&t.getAttribute("poster")&&(this.videoEl.poster=t.getAttribute("poster"))}}export{r as V};
